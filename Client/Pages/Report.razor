@page "/reports/{Id:long}"
@inject HttpClient http
@inject NotificationHandler notificationHandler
@inject NavigationManager navigationManager
@inherits SingleResourcePage<CrashReportDTO, CrashReportUpdated>
@using ThriveDevCenter.Shared.Models
@using ThriveDevCenter.Client.Services
@using ThriveDevCenter.Shared.Models.Enums
@using ThriveDevCenter.Shared.Notifications
@implements IAsyncDisposable

<SingleResourceDisplayer Error="@Error" Loading="@Loading" HasData="@(Data != null)">
    @if (Data != null)
    {
        <h3>
            Crash Report @Data.Id
            @if (Data.State == ReportState.Closed)
            {
                <span class="badge badge-success ml-2">Closed</span>
            } else if (Data.State == ReportState.Duplicate)
            {
                <span class="badge badge-warning ml-2">Duplicate</span>
            }
        </h3>

        <ul>
            <li><strong>Public</strong>: @Data.Public</li>
            <li><strong>Crash Happened At</strong>: @Data.HappenedAt.ToLocalTime().ToString("G")</li>
            <li><strong>Created At</strong>: @Data.CreatedAt.ToLocalTime().ToString("G")</li>
            <li><strong>Updated At</strong>: @Data.UpdatedAt.ToLocalTime().ToString("G")</li>
        </ul>

        <AdminResourceDeleteButtons UsesSoftDelete="@false" Name="@($"Crash Report {Data.Id}")" Id="@Data.Id"
                                    DeleteURLBase="api/v1/CrashReport"
                                    DeletePromptTitle="Delete this Crash Report?" />

        <h3>Description</h3>

        @* TODO: move this to markdown once the XSS resistant version is in nuget *@

        <p>@Data.Description</p>

        <AccessLimited AutoRedirectIfNotLoggedIn="false" RequiredAccess="UserAccessLevel.User">
            <AuthorizedContent>
                @if (Data.DescriptionLastEdited.HasValue)
                {
                    <p>Description last edited at
                        @Data.DescriptionLastEdited.Value.ToLocalTime().ToString("G") by
                        @Data.DescriptionLastEditedById</p>
                }
            </AuthorizedContent>
            <AccessMissingContent>
                @if (Data.DescriptionLastEdited.HasValue)
                {
                    <p>Description last edited at @Data.DescriptionLastEdited.Value.ToLocalTime().ToString("G")</p>
                }
            </AccessMissingContent>
        </AccessLimited>

        <AccessLimited AutoRedirectIfNotLoggedIn="false" RequiredAccess="UserAccessLevel.Developer">
            <Button ButtonStyle="secondary" Enabled="@false">Edit</Button>
        </AccessLimited>

        <h3>Callstack</h3>

        <pre>@Data.CondensedCallstack</pre>

        <h4>Full Stack Details</h4>
        <pre>@Data.PrimaryCallstack</pre>

        <AccessLimited AutoRedirectIfNotLoggedIn="false" RequiredAccess="UserAccessLevel.Developer">
            <AuthorizedContent>
                <h3>Logs</h3>
                <pre>TODO: fetch logs</pre>

                <h3>Crash dump</h3>
                <pre>TODO: fetch crash dump</pre>

                @if (Data.CanReProcess)
                {
                    <Button ButtonStyle="secondary" Enabled="@false">ReProcess Dump File</Button>
                }
                else
                {
                    <p>Crash dump for this report has been deleted.</p>
                }
            </AuthorizedContent>
            <AccessMissingContent>
                <h3>Logs</h3>

                <p>
                    Only Thrive developers can view logs.
                    <NavLink href="@navigationManager.GetLinkToLogin("Only developers can view logs")">
                        Login
                    </NavLink>
                </p>

            </AccessMissingContent>
        </AccessLimited>

        /*@ TODO: implement commenting at some point
        <h3>Comments</h3>
        @*/

        /*@ TODO: implement notification registering
        <h3>Notifications</h3>
        @*/
    }
</SingleResourceDisplayer>

@code {

    [Parameter]
    public string FileBrowserPath { get; set; }

    protected override Task<CrashReportDTO> StartQuery()
    {
        return http.GetFromJsonAsync<CrashReportDTO>($"api/v1/CrashReport/{Id}");
    }

    public override void GetWantedListenedGroups(UserAccessLevel currentAccessLevel, ISet<string> groups)
    {
        groups.Add(NotificationGroups.CrashReportUpdatedPrefix + Id);
    }

    public async ValueTask DisposeAsync()
    {
        await notificationHandler.Unregister(this);
    }

    protected override Task OnFirstDataReceived()
    {
        return notificationHandler.Register(this);
    }
}
