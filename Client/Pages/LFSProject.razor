@page "/lfs/{Id:long}/{*FileBrowserPath}"
@inject HttpClient http
@inject NotificationHandler notificationHandler
@inject NavigationManager navigationManager
@inherits SingleResourcePage<LFSProjectDTO, LFSProjectUpdated>
@using ThriveDevCenter.Shared.Models
@using ThriveDevCenter.Shared
@using ThriveDevCenter.Client.Services
@using ThriveDevCenter.Shared.Notifications
@implements IAsyncDisposable

<SingleResourceDisplayer Error="@Error" Loading="@Loading" HasData="@(Data != null)">
    @if (Data != null)
    {
        <h3>Git LFS Project @Data.Name</h3>

        <ul>
            <li><strong>Public</strong>: @Data.Public</li>
            <li><strong>Git LFS URL</strong>: TODO: reimplement this</li>
            <li><strong>Repository URL</strong>: <a href="@Data.RepoUrl">@Data.RepoUrl</a></li>
            <li><strong>Git LFS URL</strong>: @ComputeLfsURL()</li>
            <li><strong>Clone URL</strong>: @Data.CloneUrl</li>
            <li><strong>Created At</strong>: @Data.CreatedAt.ToLocalTime().ToString("G")</li>
            <li><strong>Updated At</strong>: @Data.UpdatedAt.ToLocalTime().ToString("G")</li>

            <AccessLimited RequiredAccess="UserAccessLevel.Admin" AutoRedirectIfNotLoggedIn="@false">
                <li><strong>Deleted</strong>: @Data.Deleted</li>
            </AccessLimited>
        </ul>

        <AdminResourceDeleteButtons Deleted="@Data.Deleted" Name="@Data.Name" Id="@Data.Id"
                                    DeleteURLBase="api/v1/LFSProject" />

        <p>
            Visit your profile to find you LFS access token, which you need to use in place of your password when
            Git asks to authenticate for Git LFS access.
        </p>

        <h3>Files</h3>
        <p>
            File tree generated at: @Data.FileTreeUpdated?.ToLocalTime().ToString("G") from commit:
            @Data.FileTreeCommit
        </p>

        <LFSProjectFileBrowser BasePath="@($"lfs/{Data.Id}/")" RootFolderName="@Data.Name" ProjectId="@Data.Id"
                               ProjectRepoURL="@Data.RepoUrl"
                               FileBrowserPath="@FileBrowserPath"/>

        <AccessLimited AutoRedirectIfNotLoggedIn="false" RequiredAccess="UserAccessLevel.Developer">
            <p>TODO: reimplement these:</p>
            <Button ButtonStyle="warning" Enabled="false">Refresh</Button>
            <AccessLimited AutoRedirectIfNotLoggedIn="false" RequiredAccess="UserAccessLevel.Admin">
                <Button class="mx-1" ButtonStyle="danger" Enabled="false">Rebuild</Button>
            </AccessLimited>
        </AccessLimited>

        <hr />
        <h3>Statistics</h3>
        <table class="table table-bordered">
            <caption>Statistics updated: @Data.TotalSizeUpdated?.ToLocalTime().ToString("G")</caption>
            <tbody>
            <tr>
                <th scope="row">Total size</th>
                <td>@Data.TotalObjectSize.BytesToMiB()</td>
            </tr>
            <tr>
                <th scope="row">Object count</th>
                <td>@Data.TotalObjectCount</td>
            </tr>
            </tbody>
        </table>

        <GitLfsRawObjects Id="@Id" />
    }
</SingleResourceDisplayer>

@code {

    [Parameter]
    public string FileBrowserPath { get; set; }

    protected override Task<LFSProjectDTO> StartQuery()
    {
        return http.GetFromJsonAsync<LFSProjectDTO>($"api/v1/LFSProject/{Id}");
    }

    public override void GetWantedListenedGroups(UserAccessLevel currentAccessLevel, ISet<string> groups)
    {
        groups.Add(NotificationGroups.LFSItemUpdatedPrefix + Id);
    }

    public async ValueTask DisposeAsync()
    {
        await notificationHandler.Unregister(this);
    }

    protected override Task OnFirstDataReceived()
    {
        return notificationHandler.Register(this);
    }

    private string ComputeLfsURL()
    {
        return new Uri(new Uri(navigationManager.BaseUri), Data.LfsUrlSuffix).ToString();
    }
}
