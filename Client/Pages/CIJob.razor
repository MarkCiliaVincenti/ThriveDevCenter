@page "/ci/{ProjectId:long}/build/{BuildId:long}/jobs/{Id:long}"
@inject HttpClient http
@inject NotificationHandler notificationHandler
@inject NavigationManager navigationManager
@inherits SingleResourcePage<CIJobDTO, CIJobUpdated>
@using ThriveDevCenter.Shared.Models
@using ThriveDevCenter.Client.Services
@using ThriveDevCenter.Shared.Notifications
@implements IAsyncDisposable

<SingleResourceDisplayer Error="@Error" Loading="@Loading" HasData="@(Data != null)">
    @if (Data != null)
    {
        <h3>CI Job @Data.JobName for Build #@Data.CiBuildId in @Data.ProjectName</h3>
        <ul>
            <li><strong>State</strong>: @Data.State</li>
            <li>
                <strong>Succeeded</strong>:
                @(Data.State == CIJobState.Finished ? Data.Succeeded.ToString() : "pending")
            </li>
            <li><strong>Started At</strong>: @(Data.CreatedAt?.ToLocalTime().ToString("G") ?? "unknown")</li>
        </ul>

        <AccessLimited RequiredAccess="UserAccessLevel.Admin" AutoRedirectIfNotLoggedIn="@false">
            @* TODO: implement these buttons *@
            <Button Enabled="@false" ButtonStyle="secondary">Cancel</Button>
            <br />
        </AccessLimited>

        <br />

        <h4>Output</h4>

        <CIJobOutput ProjectId="@Data.CiProjectId" BuildId="@Data.CiBuildId" JobId="@Data.CiJobId" />

        <h4>Artifacts</h4>
    }
</SingleResourceDisplayer>

@code {

    [Parameter]
    public long ProjectId { get; set; }

    [Parameter]
    public long BuildId { get; set; }

    protected override Task<CIJobDTO> StartQuery()
    {
        return http.GetFromJsonAsync<CIJobDTO>($"api/v1/CIProject/{ProjectId}/builds/{BuildId}/jobs/{Id}");
    }

    public override void GetWantedListenedGroups(UserAccessLevel currentAccessLevel, ISet<string> groups)
    {
        if (Data != null)
            groups.Add(NotificationGroups.CIProjectsBuildsJobUpdatedPrefix + Data.NotificationsId);
    }

    public async ValueTask DisposeAsync()
    {
        await notificationHandler.Unregister(this);
    }

    protected override Task OnFirstDataReceived()
    {
        return notificationHandler.Register(this);
    }

}
