@page "/association/members"
@inject HttpClient Http
@inject NavigationManager NavManager
@inject ComponentUrlHelper URLHelper
@inject NotificationHandler NotificationHandler
@using ThriveDevCenter.Shared
@using ThriveDevCenter.Shared.Notifications
@using System.Threading
@using ThriveDevCenter.Client.Services
@using ThriveDevCenter.Shared.Models
@implements ThriveDevCenter.Client.Services.INotificationHandler<AssociationMemberListUpdated>
@inherits PaginatedPage<ThriveDevCenter.Shared.Models.AssociationMemberInfo>

<AccessLimited RequiredAccess="UserAccessLevel.Admin" RedirectOnInsufficientPermission="@true">
    <h3>Association Members</h3>

    @if (!string.IsNullOrEmpty(Error))
    {
        <div class="alert alert-danger" role="alert">
            @Error
        </div>
    }
    else
    {
        <PaginatedTable ShowPaginator="@(Data != null)" CurrentPage="@Data?.CurrentPage" PageCount="@Data?.PageCount"
                        OnPageChanged="async (e) => await ChangePage(e)"
                        OnSortChanged="async (column) => await ChangeSort(column)"
                        GetSortClass="@SortClass"
                        ShowContentSpinner="@VisibleFetchInProgress"
                        Columns="@columns"
                        ShowNoContent="@NoItemsFound">
            @if (Data != null)
            {
                @foreach (var item in Data.Results)
                {
                    <tr @key="item.Id">
                        <th scope="row"><NavLink href="@($"association/members/{item.Id}")">@item.Email</NavLink></th>
                        <td>@item.JoinDate.ToString("d")</td>
                        <td>
                            @if(item.UserId != null)
                            {
                                <UsernameDisplayer UserId="@item.UserId" ShowNavLink="@true" />
                            }
                            else
                            {
                                <span>No account</span>
                            }
                        </td>
                        <td>@item.BoardMember</td>
                    </tr>
                }
            }
        </PaginatedTable>
    }

    <hr />

    @if (!showNewForm)
    {
        <StatusMessageShower Message="@createMessage" Type="@createMessageType" />
    }

    <Button class="mb-3 mr-1" ButtonStyle="success" OnPressed="@ToggleCreateNew" Enabled="@(!processingNewForm)">
        New
    </Button>

    @if (showNewForm)
    {
        @* TODO: fix for making association members *@
        <form>
            <div class="form-row">
                <div class="form-group col-md-6">
                    <label for="newCIProjectName">Project Name</label>
                    <input type="text" class="form-control" id="newCIProjectName" @bind="newName"
                           @bind:event="oninput">
                </div>
                <div class="form-group col-md-6">
                    <label for="newCIFullRepoName">Full Repository Name</label>
                    <input type="text" class="form-control" id="newCIFullRepoName" @bind="newFullRepoName"
                           placeholder="Owner/RepoName">
                </div>
            </div>
            <div class="form-row">
                <div class="form-group col-12">
                    <div class="form-check">
                        <input class="form-check-input" type="checkbox" id="newCIProjectPublic" @bind="newPublic">
                        <label class="form-check-label" for="newCIProjectPublic">Visible to non-developers?</label>
                    </div>
                </div>
            </div>
            <div class="form-row">
                <div class="form-group col-12">
                    <label for="newCIProjectCloneURL">Clone URL</label>
                    <input type="text" class="form-control" id="newCIProjectCloneURL" @bind="newCloneURL">
                </div>
            </div>

            <div class="form-row">
                <div class="form-group col-md-6">
                    <label class="mr-1" for="newCIProjectType">Type</label>
                    <select class="custom-select" id="newCIProjectType" @bind="newProjectType">
                        @foreach (var name in Enum.GetNames<CIProjectType>())
                        {
                            <option value="@name">@name</option>
                        }
                    </select>
                </div>
                <div class="form-group col-md-6">
                    <label for="newCIProjectDefaultBranch">Default Branch Name</label>
                    <input type="text" class="form-control" id="newCIProjectDefaultBranch" @bind="newDefaultBranch">
                </div>
            </div>

            <StatusMessageShower Message="@createMessage" Type="@createMessageType" />
            <Button class="my-1" Enabled="@CanCreateNew" OnPressed="@CreateNew" Spinner="@processingNewForm">
                Create
            </Button>
        </form>
    }


    <DevCenterTitle>Association Members</DevCenterTitle>
</AccessLimited>

@code {
private readonly List<TableColumn> columns = new()
    {
        new TableColumn("Email", true),
        new TableColumn("Join Date", true, "JoinDate"),
        new TableColumn("DevCenter Account", false),
        new TableColumn("Board Member?", false),
    };

    private string? createMessage;
    private SiteNoticeType createMessageType;

    private bool showNewForm;
    private bool processingNewForm;
    private string? newName;
    private string? newFullRepoName;
    private bool newPublic;
    private string? newCloneURL;
    private CIProjectType newProjectType;
    private string? newDefaultBranch;

    private bool CanCreateNew => !processingNewForm && !string.IsNullOrEmpty(newName);

    public AssociationMembers() : base(new SortHelper("Email", SortDirection.Ascending))
    {
    }

    protected override async Task OnInitializedAsync()
    {
        await NotificationHandler.Register(this);
        await base.OnInitializedAsync();
    }

    public override Task SetParametersAsync(ParameterView parameters)
    {
        this.SetParametersFromQueryString(NavManager);

        return base.SetParametersAsync(parameters);
    }

    public Task Handle(AssociationMemberListUpdated notification, CancellationToken cancellationToken)
    {
        return HandleItemNotification(notification);
    }

    public void GetWantedListenedGroups(UserAccessLevel currentAccessLevel, ISet<string> groups)
    {
        groups.Add(NotificationGroups.AssociationMemberListUpdated);
    }

    public override async ValueTask DisposeAsync()
    {
        await base.DisposeAsync();
        await NotificationHandler.Unregister(this);
    }

    protected override Task<PagedResult<AssociationMemberInfo>?> StartQuery(Dictionary<string, string> requestParams)
    {
        return Http.GetFromJsonAsync<PagedResult<AssociationMemberInfo>>(
            QueryHelpers.AddQueryString("api/v1/AssociationMember", requestParams));
    }

    protected override async Task OnQuerySent(Dictionary<string, string> requestParams)
    {
        await URLHelper.UpdateUrlHistoryIfChanged(requestParams);
    }

    private void ToggleCreateNew()
    {
        if (showNewForm)
        {
            showNewForm = false;
        }
        else
        {
            showNewForm = true;
            createMessage = null;

            // Reset form status
            newName = null;
            newFullRepoName = null;
            newPublic = true;
            newCloneURL = null;
            newProjectType = CIProjectType.Github;
            newDefaultBranch = "master";
        }

        StateHasChanged();
    }

    private async void CreateNew()
    {
        createMessageType = SiteNoticeType.Danger;

        if (newFullRepoName == null || newCloneURL == null || newDefaultBranch == null)
        {
            createMessage = "Full repo name, clone URL, and default branch are required";
            await InvokeAsync(StateHasChanged);
            return;
        }

        processingNewForm = true;
        createMessage = null;
        await InvokeAsync(StateHasChanged);

        HttpResponseMessage result;

        try
        {
            result = await Http.PostAsJsonAsync("api/v1/AssociationMember", new CIProjectDTO()
            {
                Name = newName!,
                RepositoryFullName = newFullRepoName,
                Public = newPublic,
                RepositoryCloneUrl = newCloneURL,
                ProjectType = newProjectType,
                DefaultBranch = newDefaultBranch,
            });
        }
        catch (HttpRequestException e)
        {
            createMessage = $"Network request failed: {e.Message}";
            processingNewForm = false;
            await InvokeAsync(StateHasChanged);
            return;
        }

        processingNewForm = false;

        if (!result.IsSuccessStatusCode)
        {
            var content = await result.Content.ReadAsStringAsync();

            createMessage = $"Error, server responded with: {content}, {result.StatusCode}";
        }
        else
        {
            createMessage = "New CI project created";
            createMessageType = SiteNoticeType.Info;

            // Stop showing the form
            showNewForm = false;
        }

        await InvokeAsync(StateHasChanged);
    }
}
