@page "/lfs"
@inject HttpClient Http
@inject NavigationManager NavManager
@inject IJSRuntime JS
@inject ComponentUrlHelper UrlHelper
@inject NotificationHandler NotificationHandler
@using ThriveDevCenter.Shared
@using ThriveDevCenter.Shared.Notifications
@using System.Threading
@implements INotificationHandler<LFSProjectInfo>
@implements IAsyncDisposable
@inherits PaginatedPage<ThriveDevCenter.Shared.Notifications.LFSProjectInfo>

<h3>Git LFS Projects</h3>

<PaginatedTable ShowPaginator="@(Data != null)" CurrentPage="@Data?.CurrentPage" PageCount="@Data?.PageCount"
                OnPageChanged="async (e) => await ChangePage(e)"
                OnSortChanged="async (column) => await ChangeSort(column)"
                GetSortClass="@SortClass"
                Columns="@columns">
    @if (Data != null)
    {
        @foreach (var item in Data.Results)
        {
            <tr @key="item.Name">
                <td>@item.Name</td>
                <td>@item.Public</td>
                <td>@item.Size</td>
                <td>@item.LastUpdated.ToLocalTime().ToString("G")</td>
            </tr>
        }
    }
</PaginatedTable>

@code {

    private readonly List<TableColumn> columns = new()
    {
        new TableColumn("Name", true),
        new TableColumn("Public", true),
        new TableColumn("Size", true),
        new TableColumn("Last Updated", true)
    };

    public LFSList() : base(new SortHelper("Name", SortDirection.Ascending))
    {
    }

    protected override async Task OnInitializedAsync()
    {
        await NotificationHandler.Register(this);
        await base.OnInitializedAsync();
    }

    public override Task SetParametersAsync(ParameterView parameters)
    {
        DefaultPageSize = 5;

        this.SetParametersFromQueryString(NavManager);

        return base.SetParametersAsync(parameters);
    }

    public Task Handle(LFSProjectInfo notification, CancellationToken cancellationToken)
    {
        Console.WriteLine("Got LFS project notification");

    // InvokeAsync(() => StateHasChanged());
        return Task.CompletedTask;
    }

    public void GetWantedListenedGroups(UserAccessLevel currentAccessLevel, ISet<string> groups)
    {
        groups.Add(NotificationGroups.LFSListUpdated);

        if (currentAccessLevel.IsDeveloper())
            groups.Add(NotificationGroups.PrivateLFSUpdated);
    }

    public async ValueTask DisposeAsync()
    {
        await NotificationHandler.Unregister(this);
    }

    protected override Task<PagedResult<LFSProjectInfo>> StartQuery(Dictionary<string, string> requestParams)
    {
        return Http.GetFromJsonAsync<PagedResult<LFSProjectInfo>>(
            QueryHelpers.AddQueryString("api/v1/LFSProject", requestParams));
    }

    protected override async Task OnQuerySent(Dictionary<string, string> requestParams)
    {
        await UrlHelper.UpdateUrlHistoryIfChanged(requestParams);
    }

}
