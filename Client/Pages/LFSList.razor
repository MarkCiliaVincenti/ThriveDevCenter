@page "/lfs"
@using ThriveDevCenter.Shared
@using System.Globalization
@inject HttpClient Http
@inject NavigationManager NavManager
@inject IJSRuntime JS
@inherits PaginatedPage<LFSProjectInfo>

<h3>Git LFS Projects</h3>

@if (Data == null)
{
    <div class="spinner-border text-primary" role="status">
        <span class="sr-only">Loading...</span>
    </div>
}
else
{
    <table class="table sortable table-striped table-hover table-responsive-sm">
        <thead class="thead-light">
        <tr>
            <th scope="col" class="sort" @onclick="@(() => ChangeSort("Name"))">
                Name
                <span class="@Sort.SortClass("Name")"></span>
            </th>
            <th scope="col" class="sort" @onclick="@(() => ChangeSort("Public"))">
                Public
                <span class="@Sort.SortClass("Public")"></span>
            </th>
            <th scope="col" class="sort" @onclick="@(() => ChangeSort("Size"))">
                Size
                <span class="@Sort.SortClass("Size")"></span>
            </th>
            <th scope="col" class="sort" @onclick="@(() => ChangeSort("LastUpdated"))">
                Last Modified
                <span class="@Sort.SortClass("LastUpdated")"></span>
            </th>
        </tr>
        </thead>
        <tbody>
        @foreach (var item in Data.Results)
        {
            <tr>
                <td>@item.Name</td>
                <td>@item.Public</td>
                <td>@item.Size</td>
                <td>@item.LastUpdated.ToLocalTime().ToString("G")</td>
            </tr>
        }
        </tbody>
    </table>
    <BlazorPager CurrentPage="@Data.CurrentPage"
                 PageCount="@Data.PageCount"
                 OnPageChanged="(async e => { Page = e; await FetchData();})"
                 ShowFirstLast="true"
                 ShowPageNumbers="true"
                 VisiblePages="5"
                 FirstText="&laquo;"
                 LastText="&raquo;"
                 NextText="&rsaquo;"
                 PreviousText="&lsaquo;" />
}

@code {

    public LFSList() : base(new SortHelper("Name", SortDirection.Ascending))
    {
    }

    protected override async Task FetchData()
    {
        var requestParams = new Dictionary<string, string>
        {
            { "sortColumn", Sort.SortColumn },
            { "sortDirection", Sort.Direction.ToString() },
            { "page", Page.ToString(CultureInfo.InvariantCulture) },
            { "pageSize", PageSize.ToString(CultureInfo.InvariantCulture) }
        };

        var query = Http.GetFromJsonAsync<PagedResult<LFSProjectInfo>>(
            QueryHelpers.AddQueryString("api/v1/LFSProject", requestParams));

        // Remove default values
        if (Page == 1)
            requestParams.Remove("page");

        if (Sort.SortColumn == DefaultSortColumn)
            requestParams.Remove("sortColumn");

        var targetUri = QueryHelpers.AddQueryString(NavManager.Uri.Split("?")[0], requestParams);

        // Add new history entry if the uri would change
        if (targetUri != NavManager.Uri)
            await JS.InvokeVoidAsync("addToHistory", targetUri);

        Data = await query;
        StateHasChanged();
    }

}
