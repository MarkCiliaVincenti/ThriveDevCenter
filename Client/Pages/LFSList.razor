@page "/lfs"
@inject HttpClient Http
@inject NavigationManager NavManager
@inject IJSRuntime JS
@inject ComponentUrlHelper UrlHelper
@inject NotificationHandler NotificationHandler
@using ThriveDevCenter.Shared
@using ThriveDevCenter.Shared.Notifications
@using System.Threading
@implements INotificationHandler<LFSProjectInfo>
@implements IDisposable
@inherits PaginatedPage<ThriveDevCenter.Shared.Notifications.LFSProjectInfo>

<h3>Git LFS Projects</h3>

@if (Data == null)
{
    <div class="spinner-border text-primary" role="status">
        <span class="sr-only">Loading...</span>
    </div>
}
else
{
    <table class="table sortable table-striped table-hover table-responsive-sm">
        <thead class="thead-light">
        <tr>
            <th scope="col" class="sort" @onclick="@(() => ChangeSort("Name"))">
                Name
                <span class="@SortClass("Name")"></span>
            </th>
            <th scope="col" class="sort" @onclick="@(() => ChangeSort("Public"))">
                Public
                <span class="@SortClass("Public")"></span>
            </th>
            <th scope="col" class="sort" @onclick="@(() => ChangeSort("Size"))">
                Size
                <span class="@SortClass("Size")"></span>
            </th>
            <th scope="col" class="sort" @onclick="@(() => ChangeSort("LastUpdated"))">
                Last Modified
                <span class="@SortClass("LastUpdated")"></span>
            </th>
        </tr>
        </thead>
        <tbody>
        @foreach (var item in Data.Results)
        {
            <tr @key="item.Name">
                <td>@item.Name</td>
                <td>@item.Public</td>
                <td>@item.Size</td>
                <td>@item.LastUpdated.ToLocalTime().ToString("G")</td>
            </tr>
        }
        </tbody>
    </table>
    <BlazorPager CurrentPage="@Data.CurrentPage"
                 PageCount="@Data.PageCount"
                 OnPageChanged="async e => { Page = e; await FetchData();}"
                 ShowFirstLast="true"
                 ShowPageNumbers="true"
                 VisiblePages="5"
                 FirstText="&laquo;"
                 LastText="&raquo;"
                 NextText="&rsaquo;"
                 PreviousText="&lsaquo;" />
}

@code {

    public LFSList() : base(new SortHelper("Name", SortDirection.Ascending))
    {
    }

    protected override Task OnInitializedAsync()
    {
        NotificationHandler.Register(this);
        return base.OnInitializedAsync();
    }

    public override Task SetParametersAsync(ParameterView parameters)
    {
        DefaultPageSize = 5;

        this.SetParametersFromQueryString(NavManager);

        return base.SetParametersAsync(parameters);
    }

    public Task Handle(LFSProjectInfo notification, CancellationToken cancellationToken)
    {
        Console.WriteLine("Got LFS project notification");
        return Task.CompletedTask;
    }

    public void Dispose()
    {
        NotificationHandler.Unregister(this);
    }

    protected override Task<PagedResult<LFSProjectInfo>> StartQuery(Dictionary<string, string> requestParams)
    {
        return Http.GetFromJsonAsync<PagedResult<LFSProjectInfo>>(
            QueryHelpers.AddQueryString("api/v1/LFSProject", requestParams));
    }

    protected override async Task OnQuerySent(Dictionary<string, string> requestParams)
    {
        await UrlHelper.UpdateUrlHistoryIfChanged(requestParams);
    }
}
