@page "/lfs"
@inject HttpClient Http
@inject NavigationManager NavManager
@inject IJSRuntime JS
@inject ComponentUrlHelper UrlHelper
@inject NotificationHandler NotificationHandler
@using ThriveDevCenter.Shared
@using ThriveDevCenter.Shared.Notifications
@using System.Threading
@using ThriveDevCenter.Client.Services
@using ThriveDevCenter.Shared.Models
@implements ThriveDevCenter.Client.Services.INotificationHandler<LFSListUpdated>
@implements IAsyncDisposable
@inherits PaginatedPage<ThriveDevCenter.Shared.Models.LFSProjectInfo>

<h3>Git LFS Projects</h3>

@if (!string.IsNullOrEmpty(Error))
{
    <div class="alert alert-danger" role="alert">
        @Error
    </div>
}
else
{
    <PaginatedTable ShowPaginator="@(Data != null)" CurrentPage="@Data?.CurrentPage" PageCount="@Data?.PageCount"
                    OnPageChanged="async (e) => await ChangePage(e)"
                    OnSortChanged="async (column) => await ChangeSort(column)"
                    GetSortClass="@SortClass"
                    ShowContentSpinner="@VisibleFetchInProgress"
                    Columns="@columns"
                    ShowNoContent="@NoItemsFound">
        @if (Data != null)
        {
            @foreach (var item in Data.Results)
            {
                <tr @key="item.Id">
                    <th scope="row"><NavLink href="@($"lfs/{item.Id}")">@item.Name</NavLink></th>
                    <td>@item.Public</td>
                    <td>@item.TotalObjectSize.BytesToMiB()</td>
                    <td>@item.UpdatedAt.ToLocalTime().ToString("G")</td>
                </tr>
            }
        }
    </PaginatedTable>
}

<AccessLimited RequiredAccess="UserAccessLevel.Admin" AutoRedirectIfNotLoggedIn="@false">
    <hr />

    @if (!showNewForm)
    {
        <StatusMessageShower Message="@createMessage" Type="@createMessageType" />
    }

    <Button class="mb-3 mr-1" ButtonStyle="success" OnPressed="@ToggleCreateNew" Enabled="@(!processingNewForm)">
        New
    </Button>

    @if (showNewForm)
    {
        <form>
            <div class="form-row">
                <div class="form-group col-md-6">
                    <label for="newLFSItemName">New Project Name</label>
                    <input type="text" class="form-control" id="newLFSItemName" @bind="newName">
                </div>
                <div class="form-group col-md-6">
                    <label for="newLFSItemSlug">Project Slug</label>
                    <input type="text" class="form-control" id="newLFSItemSlug" @bind="newSlug">
                </div>
            </div>
            <div class="form-group">
                <div class="form-check">
                    <input class="form-check-input" type="checkbox" id="newLFSItemPublic" @bind="newPublic">
                    <label class="form-check-label" for="newLFSItemPublic">Visible to non-developers?</label>
                </div>
            </div>
            <div class="form-group">
                <label for="newLFSRepoURL">Repository URL</label>
                <input type="text" class="form-control" id="newLFSRepoURL" @bind="newRepoURL">
            </div>

            <div class="form-group">
                <label for="newLFSCloneURL">Git Clone URL</label>
                <input type="text" class="form-control" id="newLFSCloneURL" @bind="newCloneURL">
            </div>

            <StatusMessageShower Message="@createMessage" Type="@createMessageType" />
            <Button class="my-1" Enabled="@(!processingNewForm)" OnPressed="@CreateNew" Spinner="@processingNewForm">
                Create
            </Button>
        </form>
    }

    <DeletedResourceViewer ButtonClass="mb-3" FetchListEndpoint="api/v1/LFSProject?deleted=true"
                           RestoreEndpoint="api/v1/LFSProject/{0}/restore" />

</AccessLimited>

@code {
    private readonly List<TableColumn> columns = new()
    {
        new TableColumn("Name", true),
        new TableColumn("Public", true),
        new TableColumn("Size", true, "TotalObjectSize"),
        new TableColumn("Updated At", true, "UpdatedAt"),
    };

    private string createMessage;
    private SiteNoticeType createMessageType;

    private bool showNewForm;
    private bool processingNewForm;
    private string newName;
    private string newSlug;
    private bool newPublic;
    private string newRepoURL;
    private string newCloneURL;

    public LFSList() : base(new SortHelper("Name", SortDirection.Ascending))
    {
    }

    protected override async Task OnInitializedAsync()
    {
        await NotificationHandler.Register(this);
        await base.OnInitializedAsync();
    }

    public override Task SetParametersAsync(ParameterView parameters)
    {
        this.SetParametersFromQueryString(NavManager);

        return base.SetParametersAsync(parameters);
    }

    public Task Handle(LFSListUpdated notification, CancellationToken cancellationToken)
    {
        return HandleItemNotification(notification);
    }

    public void GetWantedListenedGroups(UserAccessLevel currentAccessLevel, ISet<string> groups)
    {
        groups.Add(NotificationGroups.LFSListUpdated);

        if (currentAccessLevel.HasAccess(UserAccessLevel.Developer))
            groups.Add(NotificationGroups.PrivateLFSUpdated);
    }

    public override async ValueTask DisposeAsync()
    {
        await base.DisposeAsync();
        await NotificationHandler.Unregister(this);
    }

    protected override Task<PagedResult<LFSProjectInfo>> StartQuery(Dictionary<string, string> requestParams)
    {
        return Http.GetFromJsonAsync<PagedResult<LFSProjectInfo>>(
            QueryHelpers.AddQueryString("api/v1/LFSProject", requestParams));
    }

    protected override async Task OnQuerySent(Dictionary<string, string> requestParams)
    {
        await UrlHelper.UpdateUrlHistoryIfChanged(requestParams);
    }

    private void ToggleCreateNew()
    {
        if (showNewForm)
        {
            showNewForm = false;
        }
        else
        {
            showNewForm = true;
            createMessage = null;

            // Reset form status
            newName = null;
            newSlug = null;
            newPublic = true;
            newRepoURL = null;
            newCloneURL = null;
        }

        StateHasChanged();
    }

    private async void CreateNew()
    {
        processingNewForm = true;
        createMessage = null;
        createMessageType = SiteNoticeType.Danger;
        await InvokeAsync(StateHasChanged);

        HttpResponseMessage result;

        try
        {
            result = await Http.PostAsJsonAsync("api/v1/LFSProject", new LFSProjectDTO()
            {
                Name =  newName,
                Slug = newSlug,
                RepoUrl = newRepoURL,
                CloneUrl = newCloneURL,
                Public = newPublic
            });
        }
        catch (HttpRequestException e)
        {
            createMessage = $"Network request failed: {e.Message}";
            processingNewForm = false;
            await InvokeAsync(StateHasChanged);
            return;
        }

        processingNewForm = false;

        if (!result.IsSuccessStatusCode)
        {
            var content = await result.Content.ReadAsStringAsync();

            createMessage = $"Error, server responded with: {content}, {result.StatusCode}";
        }
        else
        {
            createMessage = "New project created";
            createMessageType = SiteNoticeType.Info;

            // Stop showing the form
            showNewForm = false;
        }

        await InvokeAsync(StateHasChanged);
    }

}
