@using System.Text
@inject NavigationManager NavigationManager

<nav aria-label="breadcrumb">
    <ol class="breadcrumb">
        @foreach (var item in SplitPath())
        {
            <li class="breadcrumb-item @ActiveClassForItem(item)">
                <NavLink href="#" Match="NavLinkMatch.All" @onclick="@(() => NavigateToPath(item))"
                         @onclick:preventDefault="true">
                    @item.ItemName
                </NavLink>
            </li>
        }
    </ol>
</nav>

@code {

    // Variant of the breadcrumbs that doesn't use browser navigation to move around

    /// <summary>
    ///   The currently shown path
    /// </summary>
    [Parameter]
    public string? CurrentPath { get; set; }

    /// <summary>
    ///   The name of the root item in the paths
    /// </summary>
    [Parameter]
    public string RootPathName { get; set; } = "Home";

    [Parameter]
    [EditorRequired]
    public EventCallback<string?> OnPathSelected { get; set; }

    protected class PathItem
    {
        public PathItem(string name, string pathSoFar)
        {
            ItemName = name;
            PathSoFar = pathSoFar;
        }

        public readonly string ItemName;
        public readonly string PathSoFar;
        public bool Active = false;
        public bool Root = false;
    }

    protected List<PathItem> SplitPath()
    {
        var pathToCheck = CurrentPath ?? string.Empty;

        var parts = pathToCheck.Split('/');

        var result = new List<PathItem>();

        if (parts.Length == 0)
        {
            // Only root path here
            result.Add(new PathItem(RootPathName, "")
            {
                Active = true,
                Root = true,
            });
        }
        else
        {
            // Add root path first
            result.Add(new PathItem(RootPathName, "")
            {
                Root = true,
            });

            string pathSoFar = "";

            foreach (var item in parts)
            {
                // Skip empty path parts
                if(string.IsNullOrWhiteSpace(item))
                    continue;

                result.Add(new PathItem(item, pathSoFar));

                if (pathSoFar.Length > 0)
                    pathSoFar += "/";

                pathSoFar += item;
            }

            // Last item is active
            var last = result.Last();
            last.Active = true;
        }

        return result;
    }

    private string? PathForItem(PathItem item)
    {
        if (item.Active)
        {
            return CurrentPath;
        }

        if (item.Root)
        {
            // Special case for the root path
            return null;
        }

        var builder = new StringBuilder();

        if (item.PathSoFar.Length < 1)
        {
            builder.Append(item.ItemName);
        }
        else
        {
            builder.Append(item.PathSoFar);
            builder.Append('/');
            builder.Append(item.ItemName);
        }

        return builder.ToString();
    }

    protected string ActiveClassForItem(PathItem item)
    {
        // Return "active" for the last part of a path
        if (item.Active)
            return "active";

        return "";
    }

    private Task NavigateToPath(PathItem item)
    {
        return OnPathSelected.InvokeAsync(PathForItem(item));
    }
}
