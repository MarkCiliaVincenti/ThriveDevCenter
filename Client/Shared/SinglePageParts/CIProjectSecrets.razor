@inject HttpClient http
@inject NavigationManager navManager
@inject NotificationHandler notificationHandler
@using ThriveDevCenter.Shared
@using ThriveDevCenter.Shared.Notifications
@using System.Threading
@using ThriveDevCenter.Client.Services
@using ThriveDevCenter.Shared.Models
@implements ThriveDevCenter.Client.Services.INotificationHandler<CIProjectSecretsUpdated>
@implements IAsyncDisposable
@inherits ListDataPage<ThriveDevCenter.Shared.Models.CISecretDTO>

@if (!string.IsNullOrEmpty(Error))
{
    <div class="alert alert-danger" role="alert">
        @Error
    </div>
}
else
{
    <SortableTable ShowLoading="@(Data == null)"
                   OnSortChanged="@(async (column) => await ChangeSort(column))"
                   GetSortClass="@SortClass"
                   ShowContentSpinner="@VisibleFetchInProgress"
                   Columns="@columns"
                   ShowNoContent="@NoItemsFound">
        @if (Data != null)
        {
            @foreach (var item in Data)
            {
                <tr @key="item.CiSecretId">
                    <td>@item.SecretName</td>
                    <td>@item.UsedForBuildTypes</td>
                    <td>@item.CreatedAt.ToLocalTime().ToString("G")</td>
                </tr>
            }
        }
    </SortableTable>
}

@code {

    private readonly List<TableColumn> columns = new()
    {
        new TableColumn("Name", true, "SecretName"),
        new TableColumn("Type", false),
        new TableColumn("Created At", true, "CreatedAt"),
    };

    [Parameter]
    public long ProjectId { get; set; }

    public CIProjectSecrets() : base(new SortHelper("SecretName", SortDirection.Ascending))
    {
    }

    protected override async Task OnInitializedAsync()
    {
        await notificationHandler.Register(this);
        await base.OnInitializedAsync();
    }

    public override Task SetParametersAsync(ParameterView parameters)
    {
        this.SetParametersFromQueryString(navManager);

        return base.SetParametersAsync(parameters);
    }

    public Task Handle(CIProjectSecretsUpdated notification, CancellationToken cancellationToken)
    {
        return HandleItemNotification(notification);
    }

    public void GetWantedListenedGroups(UserAccessLevel currentAccessLevel, ISet<string> groups)
    {
        groups.Add(NotificationGroups.CIProjectSecretsUpdatedPrefix + ProjectId);
    }

    public override async ValueTask DisposeAsync()
    {
        await base.DisposeAsync();
        await notificationHandler.Unregister(this);
    }

    protected override Task<List<CISecretDTO>> StartQuery(Dictionary<string, string> requestParams)
    {
        return http.GetFromJsonAsync<List<CISecretDTO>>(
            QueryHelpers.AddQueryString($"api/v1/CISecrets/{ProjectId}", requestParams));
    }

}
