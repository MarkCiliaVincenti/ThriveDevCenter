@inject HttpClient Http
@inject NavigationManager NavManager
@inject IClipboard Clipboard
@inject CurrentUserInfo CurrentUserInfo
@using ThriveDevCenter.Shared.Models
@using System.IO
@using DevCenterCommunication.Models
@using SharedBase.Utilities
@using TextCopy
@using ThriveDevCenter.Client.Services
@using ThriveDevCenter.Shared
@using ThriveDevCenter.Shared.Models.Enums
@using ThriveDevCenter.Shared.Utilities

<div class="item-sidebar @ExpandedClass">
    <button type="button" class="close" data-dismiss="alert" aria-label="Close"
            @onclick="CloseSideBar" @onclick:preventDefault="true" @onclick:stopPropagation="true">
        <span aria-hidden="true">&times;</span>
    </button>

    <h2>@Item.Name</h2>

    <StatusMessageShower Message="@statusMessage" Type="@statusMessageType" />

    <div class="preview-box">
        @switch (Extension)
        {
            case ".jpg":
            case ".jpeg":
            case ".gif":
            case ".webp":
            case ".png":
            case ".svg":
            {
                <img src="@GetDownloadURL()" alt="@Item.Name" class="preview-image" />
                break;
            }
            case ".mkv":
            case ".webm":
            case ".mp4":
            {
                <video src="@GetDownloadURL()" alt="@Item.Name" class="preview-video" controls></video>
                break;
            }
            case ".flac":
            case ".ogg":
            {
                <audio src="@GetDownloadURL()" alt="@Item.Name" class="preview-audio" controls></audio>
                break;
            }
            case ".json":
            case ".md":
            case ".txt":
            {
                @if (downloadingData)
                {
                    <div class="text-center">
                        <div class="spinner-border text-primary" role="status">
                            <span class="sr-only">Loading...</span>
                        </div>
                    </div>
                }
                else
                {
                    <pre>@downloadedTextContent</pre>
                }

                break;
            }
            default:
            {
                <span>No preview available for this file type (@Extension)</span>
                break;
            }
        }
    </div>

    <div class="mx-2 my-1">
        <a href="@GetDownloadURL()" target="_blank">Download</a>

        <Button ButtonStyle="primary" class="btn-sm ml-1" OnPressed="@CopyLinkToClipboard">
            @if (!linkCopied)
            {
                <span>Copy Download Link</span>
            }
            else
            {
                <span>Copied</span>
            }
        </Button>
    </div>

    <div class="mx-1">
        <h3>Information</h3>
        <div>Size: @(Item.Size != null ? Item.Size.Value.BytesToMiB() : "unknown")</div>
        <div>Read: @Item.ReadAccess.ToUserReadableString() </div>
        <div>Write: @Item.WriteAccess.ToUserReadableString() </div>

        <AccessLimited AutoRedirectIfNotLoggedIn="@false" RequiredAccess="GroupType.RestrictedUser">
            <div>
                Owner: <UsernameDisplayer UserId="@Item.OwnerId"/>
            </div>
        </AccessLimited>

        <div>Created: <RecentTimeShortener Time="@Item.CreatedAt"/></div>
        <div>Updated: <RecentTimeShortener Time="@Item.UpdatedAt"/></div>

        <AccessLimited AutoRedirectIfNotLoggedIn="@false" RequiredAccess="GroupType.RestrictedUser">
            @if (Item.LastModifiedById != null)
            {
                <div>
                    Last modified by (excluding versions): <UsernameDisplayer UserId="@Item.LastModifiedById"/>
                </div>
            }
        </AccessLimited>

        @if (expanded)
        {
            <Button ButtonStyle="primary" class="btn-sm mr-1" OnPressed="@ToggleExpand">
                Shrink Panel
            </Button>
        }
        else
        {
            <Button ButtonStyle="primary" class="btn-sm mr-1" OnPressed="@ToggleExpand">
                Expand Versions View
            </Button>
        }

        <AccessLimited AutoRedirectIfNotLoggedIn="@false" RequiredAccess="GroupType.RestrictedUser">

            @if (!Item.Special && !Item.ModificationLocked && Item.WriteAccess.IsAccessibleTo(
                CurrentUserInfo.Groups, CurrentUserInfo.Info!.Id, Item.OwnerId))
            {
                <StorageItemFolderEditor Data="@Item" ButtonClass="btn-sm" FormClass="ml-3"/>
            }

            <Button ButtonStyle="secondary" Enabled="@false" class="btn-sm ml-1">Move</Button>

            <Button ButtonStyle="danger" Enabled="@false" class="btn-sm ml-1">Delete</Button>

            @* TODO: admin immediate purge button *@

            <h3 class="mt-2">Versions</h3>

            <StorageItemVersions StorageItemId="@Item.Id" ExpandedView="@expanded"/>
        </AccessLimited>

        <h4 class="mt-2">Extended Info</h4>
        <div>Name: @Item.Name</div>
        <div>ID: @Item.Id</div>
        <div>Type: @Item.Ftype</div>
        <div>Properties locked: @Item.ModificationLocked</div>
        <div>Can be parentless: @Item.AllowParentless</div>
        <div>Parent folder: @Item.ParentId</div>
        <div>Special: @Item.Special</div>
    </div>
</div>

@code {

    private string? statusMessage;
    private SiteNoticeType statusMessageType = SiteNoticeType.Danger;

    private string? downloadCheckedFilename;
    private bool downloadingData = true;

    // TODO: implement markdown parsing etc
    private string? downloadedTextContent;

    private bool linkCopied;

    private bool expanded;

    [Parameter]
    [EditorRequired]
    public StorageItemDTO Item { get; set; } = null!;

    [Parameter]
    public bool PreventClose { get; set; }

    private string Extension => Path.GetExtension(Item.Name);

    private string ExpandedClass => expanded ? "expanded" : string.Empty;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await base.OnAfterRenderAsync(firstRender);

        if (downloadCheckedFilename != Item.Name)
        {
            downloadCheckedFilename = Item.Name;

            switch (Extension)
            {
                case ".json":
                case ".md":
                case ".txt":
                {
                    if (Item.Size is null or > AppInfo.MaxInBrowserPreviewTextFileSize)
                    {
                        downloadedTextContent = "File too large for preview";
                        downloadingData = false;
                    }
                    else
                    {
                        await DownloadTextFile();
                    }
                    break;
                }
            }
        }
    }

    private void CloseSideBar()
    {
        // Disallow changing the file path while uploading
        if (PreventClose)
            return;

        // Navigate to the parent path, as that should close the file showing
        NavManager.NavigateTo(PathParser.GetParentPath(NavManager.Uri));
    }

    private void ToggleExpand()
    {
        expanded = !expanded;
    }

    private string GetDownloadURL(int version = -1)
    {
        string relative;

        if (version >= 0)
        {
            relative = $"api/v1/download/{Item.Id}?version={version}";
        }
        else
        {
            relative = $"api/v1/download/{Item.Id}";
        }

        return new Uri(new Uri(NavManager.BaseUri), relative).ToString();
    }

    private async Task DownloadTextFile()
    {
        downloadingData = true;
        statusMessage = null;
        statusMessageType = SiteNoticeType.Danger;
        await InvokeAsync(StateHasChanged);

        HttpResponseMessage result;

        try
        {
            result = await Http.GetAsync(GetDownloadURL());
        }
        catch (HttpRequestException e)
        {
            statusMessage = $"Network request failed: {e.Message}";
            downloadingData = false;
            await InvokeAsync(StateHasChanged);
            return;
        }

        downloadingData = false;
        var content = await result.Content.ReadAsStringAsync();

        if (!result.IsSuccessStatusCode)
        {
            statusMessage = $"Error, server responded with: {content}, {result.StatusCode}";
        }
        else
        {
            downloadedTextContent = content;
        }

        await InvokeAsync(StateHasChanged);
    }

    private async Task CopyLinkToClipboard()
    {
        linkCopied = false;
        await InvokeAsync(StateHasChanged);

        await Clipboard.SetTextAsync(GetDownloadURL());

        linkCopied = true;
        await InvokeAsync(StateHasChanged);
    }

}
