@using System.Timers
@implements IDisposable

<MarkdownRenderer Value="@(activeText ?? string.Empty)" Style="@Style" Class="@Class" />

@code {
    private string activeText;

    private readonly Timer updateTimer = new(1000);

    [Parameter]
    public string Value { get; set; }

    [Parameter]
    public string Style { get; set; } = "";

    [Parameter]
    public string Class { get; set; } = "";

    [Parameter]
    public double UpdateInterval { get; set; } = 1000;

    public UpdateLimitedMarkdown()
    {
        updateTimer.Enabled = false;
        updateTimer.Elapsed += OnUpdateTimer;
    }

    public void Dispose()
    {
        updateTimer.Dispose();
    }

    protected override async Task OnParametersSetAsync()
    {
        updateTimer.Interval = UpdateInterval;
        await base.OnParametersSetAsync();

        if (Value == null)
        {
            activeText = null;
        } else if (activeText == null)
        {
            activeText = Value;
        }
        else
        {
            // Rate limited updating is used here
            updateTimer.Enabled = true;
        }
    }

    private async void OnUpdateTimer(object sender, ElapsedEventArgs e)
    {
        if (activeText == Value)
        {
            updateTimer.Enabled = false;
            return;
        }

        activeText = Value;
        await InvokeAsync(StateHasChanged);
    }
}
