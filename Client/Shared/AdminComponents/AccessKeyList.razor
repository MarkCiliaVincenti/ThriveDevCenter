@inject HttpClient Http
@inject NavigationManager NavManager
@inject IJSRuntime JS
@inject ComponentUrlHelper UrlHelper
@inject NotificationHandler NotificationHandler
@using ThriveDevCenter.Shared
@using ThriveDevCenter.Shared.Notifications
@using System.Threading
@using ThriveDevCenter.Client.Services
@using ThriveDevCenter.Shared.Models
@implements ThriveDevCenter.Client.Services.INotificationHandler<AccessKeyListUpdated>
@implements IAsyncDisposable
@inherits PaginatedPage<ThriveDevCenter.Shared.Models.AccessKeyDTO>

@if (!string.IsNullOrEmpty(Error))
{
    <div class="alert alert-danger" role="alert">
        @Error
    </div>
}
else
{
    <AccessLimited RequiredAccess="UserAccessLevel.Admin" RedirectOnInsufficientPermission="true">
        <PaginatedTable ShowPaginator="@(Data != null)" CurrentPage="@Data?.CurrentPage" PageCount="@Data?.PageCount"
                        OnPageChanged="async (e) => await ChangePage(e)"
                        OnSortChanged="async (column) => await ChangeSort(column)"
                        GetSortClass="@SortClass"
                        ShowContentSpinner="@VisibleFetchInProgress"
                        Columns="@columns"
                        ShowNoContent="@NoItemsFound">
            @if (Data != null)
            {
                @foreach (var item in Data.Results)
                {
                    <tr @key="item.Id">
                        <th scope="row">@item.Id</th>
                        <td>@item.Description</td>
                        <td>
                            @(item.LastUsed == null ? "never" : item.LastUsed.Value.ToLocalTime().ToString("G"))
                        </td>
                        <td>@item.KeyType</td>
                        <td><Button ButtonStyle="danger" Enabled="@false">Delete</Button></td>
                    </tr>
                }
            }
        </PaginatedTable>
    </AccessLimited>
}

@code {
    private readonly List<TableColumn> columns = new()
    {
        new TableColumn("Id", true),
        new TableColumn("Description", true),
        new TableColumn("Last Accessed", true, "LastUsed"),
        new TableColumn("Scope", true, "KeyType"),
        new TableColumn("Actions", false)
    };

    public AccessKeyList() : base(new SortHelper("Id", SortDirection.Descending))
    {
    }

    protected override async Task OnInitializedAsync()
    {
        await NotificationHandler.Register(this);
        await base.OnInitializedAsync();
    }

    public override Task SetParametersAsync(ParameterView parameters)
    {
        this.SetParametersFromQueryString(NavManager);

        return base.SetParametersAsync(parameters);
    }

    public Task Handle(AccessKeyListUpdated notification, CancellationToken cancellationToken)
    {
        return HandleItemNotification(notification);
    }

    public void GetWantedListenedGroups(UserAccessLevel currentAccessLevel, ISet<string> groups)
    {
        // TODO: implement a group for this
        // groups.Add(NotificationGroups.AccessKeyListUpdated);
    }

    public override async ValueTask DisposeAsync()
    {
        await base.DisposeAsync();
        await NotificationHandler.Unregister(this);
    }

    protected override Task<PagedResult<AccessKeyDTO>> StartQuery(Dictionary<string, string> requestParams)
    {
        return Http.GetFromJsonAsync<PagedResult<AccessKeyDTO>>(
            QueryHelpers.AddQueryString("api/v1/AccessKey", requestParams));
    }

    protected override async Task OnQuerySent(Dictionary<string, string> requestParams)
    {
        await UrlHelper.UpdateUrlHistoryIfChanged(requestParams);
    }
}
