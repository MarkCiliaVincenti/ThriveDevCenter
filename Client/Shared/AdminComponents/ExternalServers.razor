@inject HttpClient http
@inject NavigationManager navManager
@inject NotificationHandler notificationHandler
@using ThriveDevCenter.Shared
@using ThriveDevCenter.Shared.Notifications
@using System.Threading
@using ThriveDevCenter.Client.Services
@using ThriveDevCenter.Shared.Models
@using System.Net
@using ThriveDevCenter.Client.Utilities
@implements ThriveDevCenter.Client.Services.INotificationHandler<ExternalServersUpdated>
@inherits PaginatedPage<ThriveDevCenter.Shared.Models.ExternalServerDTO>

<AccessLimited RequiredAccess="UserAccessLevel.Admin" RedirectOnInsufficientPermission="@true">
    @if (!string.IsNullOrEmpty(Error))
    {
        <div class="alert alert-danger" role="alert">
            @Error
        </div>
    }
    else
    {
        <StatusMessageShower Message="@message" Type="@messageType" />

        <PaginatedTable ShowPaginator="@(Data != null)" CurrentPage="@Data?.CurrentPage" PageCount="@Data?.PageCount"
                        OnPageChanged="async (e) => await ChangePage(e)"
                        OnSortChanged="async (column) => await ChangeSort(column)"
                        GetSortClass="@SortClass"
                        ShowContentSpinner="@VisibleFetchInProgress"
                        Columns="@columns"
                        ShowNoContent="@NoItemsFound"
                        UseNonFixedColumns="@true">
            @if (Data != null)
            {
                @foreach (var item in Data.Results)
                {
                    if (clientSideResourceStatus.IsDeleted(item.Id))
                        continue;

                    @* TODO: implement an arrow button to toggle showing full details of a server, with editing
                        possibility *@
                    <tr @key="item.Id">
                        <td>@item.Id</td>
                        <td>@item.Status</td>
                        <td>@item.PublicAddress</td>
                        <td>@item.StatusLastChecked.ToLocalTime().ToString("t")</td>
                        <td>@item.ReservationType (@item.ReservedFor)</td>
                        <td>@($"{item.UsedDiskSpace}%")</td>
                        <td>@item.UpdatedAt.ToLocalTime().ToString("G")</td>
                        <td>@item.CreatedAt.ToLocalTime().ToString("G")</td>
                        <td>@item.WantsMaintenance</td>
                        <td>
                            <Button Enabled="@CanReboot(item)"
                                    OnPressed="@(async () => await VerifyReboot(item))"
                                    Spinner="@IsProcessing(item.Id)" ButtonStyle="danger"
                                    class="btn-sm mb-1">
                                Reboot
                            </Button>
                            <Button Enabled="@(!IsProcessing(item.Id))"
                                    OnPressed="@(async () => await QueueMaintenance(item.Id))"
                                    Spinner="@IsProcessing(item.Id)" ButtonStyle="secondary" class="btn-sm mb-1">
                                Queue Maintenance
                            </Button>
                            <Button Enabled="@(!IsProcessing(item.Id))"
                                    OnPressed="@(async () => await QueueCleanUp(item.Id))"
                                    Spinner="@IsProcessing(item.Id)" ButtonStyle="secondary" class="btn-sm mb-1">
                                Queue Clean
                            </Button>
                            <br />
                            <Button Enabled="@(!IsProcessing(item.Id))"
                                    OnPressed="@(async () => await RefreshStatus(item.Id))"
                                    Spinner="@IsProcessing(item.Id)" ButtonStyle="secondary" class="btn-sm mr-1">
                                Refresh
                            </Button>
                            @if (item.Status != ServerStatus.Stopped && item.Status != ServerStatus.Stopping)
                            {
                                <Button Enabled="@(!IsProcessing(item.Id))"
                                        OnPressed="@(async () => await SetManualStatus(item.Id, true))"
                                        Spinner="@IsProcessing(item.Id)" ButtonStyle="warning" class="btn-sm">
                                    Set Offline
                                </Button>
                            }
                            else
                            {
                                <Button Enabled="@(!IsProcessing(item.Id))"
                                        OnPressed="@(async () => await SetManualStatus(item.Id, false))"
                                        Spinner="@IsProcessing(item.Id)" ButtonStyle="primary" class="btn-sm">
                                    Set Online
                                </Button>
                            }
                            <Button Enabled="@CanDelete(item)"
                                    OnPressed="@(async () => await VerifyDeleteServer(item))"
                                    Spinner="@IsProcessing(item.Id)" ButtonStyle="danger" class="btn-sm ml-1">
                                Delete
                            </Button>
                        </td>
                    </tr>
                }
            }
        </PaginatedTable>
    }

    <br />

    @if (!showNewForm)
    {
        <StatusMessageShower Message="@createMessage" Type="@createMessageType" />
    }

    <Button class="mb-3 mr-1" ButtonStyle="success" OnPressed="@ToggleCreateNew" Enabled="@(!processingNewForm)">
        New
    </Button>

    @if (showNewForm)
    {
        <form>
            <div class="form-row">
                <div class="form-group col-md-6">
                    <label for="newExternalServerIp">IP Address</label>
                    <input type="text" class="form-control" id="newExternalServerIp" @bind="newIP"
                           @bind:event="oninput">
                </div>
                <div class="form-group col-md-6">
                    <label for="newExternalSSHKeyName">SSH Key Filename</label>
                    <input type="text" class="form-control" id="newExternalSSHKeyName" @bind="newSSHKey"
                           placeholder="key.pem" @bind:event="oninput">
                </div>
            </div>

            <StatusMessageShower Message="@createMessage" Type="@createMessageType" />
            <Button class="my-1" Enabled="@CanCreateNew" OnPressed="@CreateNew" Spinner="@processingNewForm">
                Create
            </Button>
        </form>
    }

</AccessLimited>

@code {
    private readonly List<TableColumn> columns = new()
    {
        new TableColumn("Id", true),
        new TableColumn("Status", true),
        new TableColumn("Address", false),
        new TableColumn("Status Checked", true, "StatusLastChecked"),
        new TableColumn("Reserved For", true, "ReservationType"),
        new TableColumn("Disk Usage", true, "UsedDiskSpace"),
        new TableColumn("Updated At", true, "UpdatedAt"),
        new TableColumn("Created At", true, "CreatedAt"),
        new TableColumn("Wants Maintenance", true, "WantsMaintenance"),
        new TableColumn("Actions", false)
    };

    private readonly Dictionary<long, bool> processingItems = new();

    private readonly ClientSideResourceStatus<DeletedResourceStatus> clientSideResourceStatus = new();

    private string message;
    private SiteNoticeType messageType = SiteNoticeType.Danger;

    private string createMessage;
    private SiteNoticeType createMessageType;

    private bool showNewForm;
    private bool processingNewForm;
    private string newIP;
    private string newSSHKey;

    private bool CanCreateNew => !processingNewForm && !string.IsNullOrEmpty(newIP) && !string.IsNullOrEmpty(newSSHKey)
        && IPAddress.TryParse(newIP, out IPAddress _);

    [CascadingParameter]
    public IModalService Modal { get; set; }

    public ExternalServers() : base(new SortHelper("Id", SortDirection.Ascending))
    {
    }

    protected override async Task OnInitializedAsync()
    {
        await notificationHandler.Register(this);
        await base.OnInitializedAsync();
    }

    public Task Handle(ExternalServersUpdated notification, CancellationToken cancellationToken)
    {
        return HandleItemNotification(notification);
    }

    public void GetWantedListenedGroups(UserAccessLevel currentAccessLevel, ISet<string> groups)
    {
        groups.Add(NotificationGroups.ExternalServerListUpdated);
    }

    public override async ValueTask DisposeAsync()
    {
        await base.DisposeAsync();
        await notificationHandler.Unregister(this);
    }

    protected override Task<PagedResult<ExternalServerDTO>> StartQuery(Dictionary<string, string> requestParams)
    {
        return http.GetFromJsonAsync<PagedResult<ExternalServerDTO>>(
            QueryHelpers.AddQueryString("api/v1/ExternalServers", requestParams));
    }

    private bool IsProcessing(long serverId)
    {
        return processingItems.GetValueOrDefault(serverId, false);
    }

    private async Task QueueMaintenance(long serverId)
    {
        processingItems[serverId] = true;
        message = null;
        messageType = SiteNoticeType.Danger;
        await InvokeAsync(StateHasChanged);

        HttpResponseMessage result;

        try
        {
            result = await http.PostAsync($"api/v1/ExternalServers/{serverId}/queueMaintenance",
                new StringContent(string.Empty));
        }
        catch (HttpRequestException e)
        {
            message = $"Network request failed: {e.Message}";
            processingItems[serverId] = false;
            await InvokeAsync(StateHasChanged);
            return;
        }

        processingItems[serverId] = false;

        if (!result.IsSuccessStatusCode)
        {
            var content = await result.Content.ReadAsStringAsync();
            message = $"Error, server responded with: {content}, {result.StatusCode}";
        }
        else
        {
            message = "Server successfully scheduled for maintenance";
            messageType = SiteNoticeType.Primary;
        }

        await InvokeAsync(StateHasChanged);
    }

    private bool CanReboot(ExternalServerDTO server)
    {
        if (IsProcessing(server.Id))
            return false;

        return server.Status == ServerStatus.Running || server.Status == ServerStatus.Provisioning ||
            server.Status == ServerStatus.Stopping;
    }

    private bool CanDelete(ExternalServerDTO server)
    {
        if (IsProcessing(server.Id))
            return false;

        return server.Status == ServerStatus.Stopped;
    }

    private async Task VerifyReboot(ExternalServerDTO server)
    {
        var parameters = new ModalParameters();
        parameters.Add(nameof(ConfirmReboot.Name), $"External Server {server.Id}");

        var modal = Modal.Show<ConfirmReboot>("Restart this server?", parameters);

        var result = await modal.Result;

        if (result.Cancelled)
            return;

        await PerformReboot(server.Id);
    }

    private async Task VerifyDeleteServer(ExternalServerDTO server)
    {
        var parameters = new ModalParameters();
        parameters.Add(nameof(ConfirmDelete.Name), $"External Server {server.Id}");

        var modal = Modal.Show<ConfirmDelete>("Delete server?", parameters);

        var result = await modal.Result;

        if (result.Cancelled)
            return;

        await DeleteServer(server.Id);
    }

    private async Task VerifyReProvision(ExternalServerDTO server)
    {
        // Confirm before stopping
        var parameters = new ModalParameters();
        parameters.Add(nameof(ConfirmReProvision.Name), $"External Server {server.Id}");

        var modal = Modal.Show<ConfirmReProvision>("Re-provision this server?", parameters);

        var result = await modal.Result;

        if (result.Cancelled)
            return;

        await QueueReProvision(server.Id);
    }

    private async Task QueueReProvision(long serverId)
    {
        processingItems[serverId] = true;
        message = null;
        messageType = SiteNoticeType.Danger;
        await InvokeAsync(StateHasChanged);

        HttpResponseMessage result;

        try
        {
            result = await http.PostAsync($"api/v1/ExternalServers/{serverId}/reProvision",
                new StringContent(string.Empty));
        }
        catch (HttpRequestException e)
        {
            message = $"Network request failed: {e.Message}";
            processingItems[serverId] = false;
            await InvokeAsync(StateHasChanged);
            return;
        }

        processingItems[serverId] = false;

        if (!result.IsSuccessStatusCode)
        {
            var content = await result.Content.ReadAsStringAsync();
            message = $"Error, server responded with: {content}, {result.StatusCode}";
        }
        else
        {
            message = "Server successfully started re-provisioning";
            messageType = SiteNoticeType.Info;
        }

        await InvokeAsync(StateHasChanged);
    }

    private async Task PerformReboot(long serverId)
    {
        processingItems[serverId] = true;
        message = null;
        messageType = SiteNoticeType.Danger;
        await InvokeAsync(StateHasChanged);

        HttpResponseMessage result;

        try
        {
            result = await http.PostAsync($"api/v1/ExternalServers/{serverId}/reboot",
                new StringContent(string.Empty));
        }
        catch (HttpRequestException e)
        {
            message = $"Network request failed: {e.Message}";
            processingItems[serverId] = false;
            await InvokeAsync(StateHasChanged);
            return;
        }

        processingItems[serverId] = false;

        if (!result.IsSuccessStatusCode)
        {
            var content = await result.Content.ReadAsStringAsync();
            message = $"Error, server responded with: {content}, {result.StatusCode}";
        }
        else
        {
            message = "Server successfully commanded to restart";
            messageType = SiteNoticeType.Primary;
        }

        await InvokeAsync(StateHasChanged);
    }

    private async Task QueueCleanUp(long serverId)
    {
        processingItems[serverId] = true;
        message = null;
        messageType = SiteNoticeType.Danger;
        await InvokeAsync(StateHasChanged);

        HttpResponseMessage result;

        try
        {
            result = await http.PostAsync($"api/v1/ExternalServers/{serverId}/queueCleanUp",
                new StringContent(string.Empty));
        }
        catch (HttpRequestException e)
        {
            message = $"Network request failed: {e.Message}";
            processingItems[serverId] = false;
            await InvokeAsync(StateHasChanged);
            return;
        }

        processingItems[serverId] = false;

        if (!result.IsSuccessStatusCode)
        {
            var content = await result.Content.ReadAsStringAsync();
            message = $"Error, server responded with: {content}, {result.StatusCode}";
        }
        else
        {
            message = "Clean queued on server successfully. It will be cleaned next time a job runs on it";
            messageType = SiteNoticeType.Primary;
        }

        await InvokeAsync(StateHasChanged);
    }

    private async Task SetManualStatus(long serverId, bool offline)
    {
        processingItems[serverId] = true;
        message = null;
        messageType = SiteNoticeType.Danger;
        await InvokeAsync(StateHasChanged);

        HttpResponseMessage result;

        try
        {
            result = await http.PostAsync($"api/v1/ExternalServers/{serverId}/offline?offline={offline}",
                new StringContent(string.Empty));
        }
        catch (HttpRequestException e)
        {
            message = $"Network request failed: {e.Message}";
            processingItems[serverId] = false;
            await InvokeAsync(StateHasChanged);
            return;
        }

        processingItems[serverId] = false;

        if (!result.IsSuccessStatusCode)
        {
            var content = await result.Content.ReadAsStringAsync();
            message = $"Error, server responded with: {content}, {result.StatusCode}";
        }
        else
        {
            message = "Manually set server status changed";
            messageType = SiteNoticeType.Primary;
        }

        await InvokeAsync(StateHasChanged);
    }

    private async Task RefreshStatus(long serverId)
    {
        processingItems[serverId] = true;
        message = null;
        messageType = SiteNoticeType.Danger;
        await InvokeAsync(StateHasChanged);

        HttpResponseMessage result;

        try
        {
            result = await http.PostAsync($"api/v1/ExternalServers/{serverId}/refreshStatus",
                new StringContent(string.Empty));
        }
        catch (HttpRequestException e)
        {
            message = $"Network request failed: {e.Message}";
            processingItems[serverId] = false;
            await InvokeAsync(StateHasChanged);
            return;
        }

        processingItems[serverId] = false;

        if (!result.IsSuccessStatusCode)
        {
            var content = await result.Content.ReadAsStringAsync();
            message = $"Error, server responded with: {content}, {result.StatusCode}";
        }
        else
        {
            message = "Successfully refreshed server state";
            messageType = SiteNoticeType.Primary;
        }

        await InvokeAsync(StateHasChanged);
    }

    private async Task DeleteServer(long serverId)
    {
        processingItems[serverId] = true;
        message = null;
        messageType = SiteNoticeType.Danger;
        await InvokeAsync(StateHasChanged);

        HttpResponseMessage result;

        try
        {
            result = await http.DeleteAsync($"api/v1/ExternalServers/{serverId}");
        }
        catch (HttpRequestException e)
        {
            message = $"Network request failed: {e.Message}";
            processingItems[serverId] = false;
            await InvokeAsync(StateHasChanged);
            return;
        }

        processingItems[serverId] = false;

        if (!result.IsSuccessStatusCode)
        {
            var content = await result.Content.ReadAsStringAsync();
            message = $"Error, server responded with: {content}, {result.StatusCode}";
        }
        else
        {
            message = "Server deleted";
            messageType = SiteNoticeType.Warning;
            clientSideResourceStatus.SetDeletedStatus(serverId);
        }

        await InvokeAsync(StateHasChanged);
    }

    private void ToggleCreateNew()
    {
        if (showNewForm)
        {
            showNewForm = false;
        }
        else
        {
            showNewForm = true;
            createMessage = null;

            // Reset form status
            newIP = null;
            newSSHKey = null;
        }

        StateHasChanged();
    }

    private async void CreateNew()
    {
        processingNewForm = true;
        createMessage = null;
        createMessageType = SiteNoticeType.Danger;
        await InvokeAsync(StateHasChanged);

        HttpResponseMessage result;

        try
        {
            result = await http.PostAsJsonAsync("api/v1/ExternalServers", new ExternalServerDTO()
            {
                PublicAddress = IPAddress.Parse(newIP),
                SSHKeyFileName = newSSHKey,
            });
        }
        catch (HttpRequestException e)
        {
            createMessage = $"Network request failed: {e.Message}";
            processingNewForm = false;
            await InvokeAsync(StateHasChanged);
            return;
        }

        processingNewForm = false;

        if (!result.IsSuccessStatusCode)
        {
            var content = await result.Content.ReadAsStringAsync();

            createMessage = $"Error, server responded with: {content}, {result.StatusCode}";
        }
        else
        {
            createMessage = "New server added";
            createMessageType = SiteNoticeType.Info;

            // Stop showing the form
            showNewForm = false;
        }

        await InvokeAsync(StateHasChanged);
    }

}
