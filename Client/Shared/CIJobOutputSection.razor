@inject HttpClient http
@inject IJSRuntime js
@inherits SingleResourcePage<IList<string>>
@using ThriveDevCenter.Shared.Models

<SingleResourceDisplayer Error="@Error" Loading="@Loading" HasData="@(Data != null)">
    @if (Data != null)
    {
        <div class="output-area">
            @{
                var lineSource = RealtimeOutput ?? Data;
            }

            @for (int i = 0; i < lineSource.Count; ++i)
            {
                // Skip last line if it is empty to not show a trailing line in the output
                var line = lineSource[i];

                bool last = i + 1 >= lineSource.Count;

                if (i > 0 && last && string.IsNullOrWhiteSpace(line))
                    continue;

                // Detect if this is last visible line
                string id = null;

                if (i + 2 >= lineSource.Count)
                {
                    if (last || string.IsNullOrWhiteSpace(lineSource[i + 1]))
                    {
                        id = LastElementId;
                    }
                }

                <div class="output-line" id="@id">
                    <span class="line-number">@(i + 1)</span><span>@line</span>
                </div>
            }
        </div>
    }
</SingleResourceDisplayer>

@code {

    [Parameter]
    public long ProjectId { get; set; }

    [Parameter]
    public long BuildId { get; set; }

    [Parameter]
    public long JobId { get; set; }

    /// <summary>
    ///   If set, overrides the data from the server fetch
    /// </summary>
    [Parameter]
    public List<string> RealtimeOutput { get; set; }

    private string LastElementId => $"output-section-{Id}-last";

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await base.OnAfterRenderAsync(firstRender);

        // Scroll to last existing output line
        // TODO: only scroll when scroll is at the end already
        await js.InvokeVoidAsync("scrollToElement", LastElementId);
    }

    protected override async Task<IList<string>> StartQuery()
    {
        if (RealtimeOutput != null)
            return new List<string>();

        var data = await http.GetFromJsonAsync<CIJobOutputSectionDTO>(
            $"api/v1/CIProject/{ProjectId}/builds/{BuildId}/jobs/{JobId}/output/{Id}");

        return data?.Output.Split('\n');
    }

}
