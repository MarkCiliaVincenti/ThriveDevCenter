@page
@inject ITokenGenerator Jwt
@inject ApplicationDbContext Database
@inject StaticHomePageNotice StaticHomePageNotice
@using System.Text.Json
@using ThriveDevCenter.Server.Authorization
@using ThriveDevCenter.Server.Models
@using ThriveDevCenter.Server.Services
@using ThriveDevCenter.Shared
@using ThriveDevCenter.Shared.Models
@addTagHelper *, Microsoft.AspNetCore.Mvc.TagHelpers
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=no" />
    <title>ThriveDevCenter</title>
    <base href="/" />
    <link href="css/bootstrap/bootstrap.min.css" rel="stylesheet" />
    <link href="css/app.css" rel="stylesheet" />
    <link href="ThriveDevCenter.Client.styles.css" rel="stylesheet" />
</head>
<body>

<input type="hidden" id="csrfUserToken" value="@(await GenerateUserTokenJSON())" />
<input type="hidden" id="csrfTokenExpiryTimestamp" value="@GenerateExpiryTimeString()" />

@if (StaticHomePageNotice.Enabled)
{
    <input type="hidden" id="homePageNoticeTextSource" value="@StaticHomePageNotice.Text" />
}

@{
    #pragma warning disable 0162 // unreachable code
}
@* ReSharper disable once ConditionIsAlwaysTrueOrFalse *@
@if (AppInfo.UsePrerendering)
{
    <component type="typeof(ThriveDevCenter.Client.App)" render-mode="WebAssemblyPrerendered" />
}
else
{
    <div id="app">
        <div style="text-align: center">
            Loading app...<br>
            <span class="spinner-border text-primary" role="status"></span><br>
            Make sure JavaScript is enabled if this message is shown for more than a few seconds.<br>
            Then reload this page.
        </div>
    </div>
}

<div id="blazor-error-ui">
    An unhandled error has occurred.
    <a href="" class="reload">Reload</a>
    <a class="dismiss">🗙</a>
</div>
<script src="interop.js"></script>
<script src="_framework/blazor.webassembly.js"></script>
</body>
</html>

@functions{

    private string GenerateExpiryTimeString()
    {
        var expiry =
            Jwt.GetCSRFTokenExpiry() - TimeSpan.FromSeconds(5);

        return expiry.ToString("O");
    }

    private async Task<string> GenerateUserTokenJSON()
    {
        var user = await Request.Cookies.GetUserFromSession(Database,
            Request.HttpContext.Connection.RemoteIpAddress);

        UserInfo info = null;

        if (user != null)
        {
            info = user.GetInfo(user.HasAccessLevel(UserAccessLevel.Admin) ?
                RecordAccessLevel.Admin :
                RecordAccessLevel.Private);
        }

        var result = new UserToken()
        {
            CSRF = Jwt.GenerateCSRFToken(user),
            User = info
        };

        return JsonSerializer.Serialize(result);
    }

}
